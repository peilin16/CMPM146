from models.model import Model
from tensorflow.python.keras import Sequential,layers,models
from models.basic_model import BasicModel  # ✅ Import BasicModel directly
from tensorflow.python.keras.optimizers import rmsprop_v2,adam_v2
from tensorflow.python.keras.models import load_model  # ✅ Import load_model

#from tensorflow.python.keras.layers.
#from tensorflow.keras.layers.experimental.preprocessing import Rescaling
#from tensorflow.keras.optimizers import RMSprop, Adam

class TransferedModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # use this model by removing the last layer, adding dense layers and an output layer
 
        base_model = BasicModel(input_shape, categories_count).model   
 
        for layer in base_model.layers:
            layer.trainable = False
 
        base_model = models.Model(inputs=base_model.input, outputs=base_model.layers[-2].output)
 
        new_layers = Sequential([
            layers.Dense(128, activation='relu'),  # New dense layer
            layers.Dropout(0.5),  # Dropout to reduce overfitting
            layers.Dense(categories_count, activation='softmax')  # New classification layer
        ])
 
        self.model = models.Sequential([
            base_model,
            new_layers
        ])
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        self.model.compile(
            optimizer=adam_v2.Adam(learning_rate=0.0005),  # Lower LR to avoid overfitting
            loss="categorical_crossentropy",
            metrics=["accuracy"]
        )
